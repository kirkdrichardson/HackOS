// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return ~(x) + 1;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i, bit;
        var bool productIsNegative;

        let productIsNegative = false;

        if ((x < 0) & (y < 0)) {
            let x = Math.abs(x);
            let y = Math.abs(y);
        } else {
            if (x < 0) {
                let x = Math.abs(x);
                let productIsNegative = true;
            }

            if (y < 0) {
                let y = Math.abs(y);
                let productIsNegative = true;
            }
        }

        let sum = 0;
        let shiftedX = x;
        let i = 0;
        let bit = 1;

        while (i < 16) {
            // If ith bit of y == 1
            if ((y & bit) = bit) {
                let sum = sum + shiftedX;
            }
            let bit = bit + bit; // Shift our bit mask
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        if (productIsNegative) {
            let sum = (~sum) + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, double;
        var bool quotientIsNegative;
        
        let quotientIsNegative = false;

        if ((x < 0) & (y < 0)) {
            let x = Math.abs(x);
            let y = Math.abs(y);
        } else {
            if (x < 0) {
                let x = Math.abs(x);
                let quotientIsNegative = true;
            }

            if (y < 0) {
                let y = Math.abs(y);
                let quotientIsNegative = true;
            }
        }

        if (y > x) {
            return 0;
        }

        let q = Math.divide(x, (y + y));
        let double = q + q;

        if ((x - (double * y)) < y) {
            if (quotientIsNegative) {
                return -(double);
            }
            return double;
        }

        if (quotientIsNegative) {
            return -(double + 1);
        }

        return double + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int val,
        bit, // numOfBits / 2 - 1
        bitVal, // 2^^bit
        newVal;

        let val = 0;
        let bit = 7;
        let bitVal = 128;
        let newVal = 0;

        while (bit > -1) {
            let newVal = val + bitVal;

            if ((newVal * newVal) < (x + 1)) { // while newVal^^2 <= x
                let val = newVal;
            }
            
            let bit = bit - 1;
            let bitVal = bitVal / 2;
        }

        return val;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return (~a) + 1;
        }
        return b;
    }
}
